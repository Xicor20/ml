import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import matplotlib.pyplot as plt

data = {
 'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rainy', 'Rainy', 'Rainy','Overcast', 'Sunny', 'Sunny', 'Rainy', 'Sunny', 'Overcast', 'Overcast','Rainy'],
 'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool','Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
 'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal','High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
 'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong','Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],
 'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes','Yes', 'Yes', 'Yes', 'Yes', 'No']
 }

df = pd.DataFrame(data)
df_encoded = df.apply(lambda x: pd.factorize(x)[0])

X = df_encoded.drop('PlayTennis', axis=1)
y = df_encoded['PlayTennis']

clf = DecisionTreeClassifier(criterion='entropy')
clf = clf.fit(X, y)

plt.figure(figsize=(12,8))
tree.plot_tree(clf,feature_names=df.columns[:-1].tolist(), class_names=['No', 'Yes'],filled=True,rounded=True,fontsize=10)
plt.show()

def predict(query, clf, feature_names,df):
    query_encoded = [pd.factorize(df[feature])[0][df[feature] == query[feature]].tolist()[0] for feature in feature_names]
    prediction = clf.predict([query_encoded]) # Predict using the encoded query
    return 'Yes' if prediction == 1 else 'No' # Return the prediction

prediction = predict(query, clf, df.columns[:-1].tolist(), df) 
print(f"Prediction for {query}: {prediction}")

# Assuming df_encoded is the DataFrame used to train the model
prediction = predict(query, clf, df.columns[:-1].tolist(), df_encoded, df) 
print(f"Prediction for {query}: {prediction}")

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data = {
 'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rainy', 'Rainy', 'Rainy','Overcast', 'Sunny', 'Sunny', 'Rainy', 'Sunny', 'Overcast', 'Overcast','Rainy'],
 'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool','Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
 'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal','High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
 'Wind': ['Weak', 'Strong', 'Weak', 'Weak', 'Weak', 'Strong', 'Strong','Weak', 'Weak', 'Weak', 'Strong', 'Strong', 'Weak', 'Strong'],
 'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes','Yes', 'Yes', 'Yes', 'Yes', 'No']
 }

df = pd.DataFrame(data)

X = df.drop('PlayTennis', axis=1)
y = df['PlayTennis']

encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
X_encoded = encoder.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

sample_input = {
 'Outlook': ['Sunny'],
 'Temperature': ['Cool'],
 'Humidity': ['High'],
 'Wind': ['Weak']
 }

sample_input_encoded = encoder.transform(pd.DataFrame(sample_input))
sample_prediction = clf.predict(sample_input_encoded)

if sample_prediction[0] == 'No':
 print("Prediction: No, don't play tennis.")
else:
 print("Prediction: Yes, play tennis.")
